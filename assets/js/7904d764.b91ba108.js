"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[5606],{5411:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"form/select/components/payer-select","title":"<AvPayerSelect />","description":"A select list that automatically loads and pages through payers for supported transactionTypes when the user scrolls down.","source":"@site/docs/form/select/components/payer-select.md","sourceDirName":"form/select/components","slug":"/form/select/components/payer-select","permalink":"/availity-react/form/select/components/payer-select","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/select/components/payer-select.md","tags":[],"version":"current","frontMatter":{"title":"<AvPayerSelect />"},"sidebar":"someSidebar","previous":{"title":"<AvOrganizationSelect />","permalink":"/availity-react/form/select/components/organization-select"},"next":{"title":"Getting Started","permalink":"/availity-react/form/upload/"}}');var s=r(4848),o=r(8453);const a={title:"<AvPayerSelect />"},i=void 0,c={},l=[{value:"Example",id:"example",level:3},{value:"Live example: Storybook",id:"live-example-storybook",level:4},{value:"Props",id:"props",level:3},{value:"<code>customerId: string</code>",id:"customerid-string",level:4},{value:"<code>region: string</code>",id:"region-string",level:4},{value:"<code>tranTypeCode: string</code>",id:"trantypecode-string",level:4}];function d(e){const t={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"A select list that automatically loads and pages through payers for supported transactionTypes when the user scrolls down."}),"\n",(0,s.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"import React from 'react';\nimport { Form } from '@availity/form';\nimport { AvPayerSelect } from '@availity/select';\nimport { Button } from 'reactstrap';\nimport * as yup from 'yup';\nimport '@availity/yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      organizations: '',\n    }}\n    onSubmit={(values) => apiResource.submit(values)}\n    validationSchema={yup.object().shape({\n      organizations: yup.string().isRequired('This field is required.'),\n    })}\n  >\n    <AvPayerSelect\n      id=\"payers\"\n      name=\"payers\"\n      parameters={{\n        region: 'FL',\n        tranTypeCode: '1',\n      }}\n      customerId=\"12345\"\n    />\n    <Button color=\"primary\" type=\"submit\">\n      Submit\n    </Button>\n  </Form>\n);\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"live-example-storybook",children:["Live example: ",(0,s.jsx)(t.a,{href:"https://availity.github.io/availity-react/storybook/?path=/story/bootstrap-components-select-async-selects--payer-select",children:"Storybook"})]}),"\n",(0,s.jsx)(t.h3,{id:"props",children:"Props"}),"\n",(0,s.jsxs)(t.p,{children:["Extends ",(0,s.jsx)(t.a,{href:"/form/select/components/resource-select/#props",children:"ResourceSelect Props"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"customerid-string",children:(0,s.jsx)(t.code,{children:"customerId: string"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"extended-payers"})," API from ",(0,s.jsx)(t.code,{children:"aries"})," requires a ",(0,s.jsx)(t.code,{children:"customerId"})," prop that must be a string. The ",(0,s.jsx)(t.code,{children:"AvPayerSelect"})," will use the ",(0,s.jsx)(t.code,{children:"customerId"})," prop in the request header, X-Availity-Customer-Id, of the ",(0,s.jsx)(t.code,{children:"all"})," call to ",(0,s.jsx)(t.code,{children:"extended-payers"}),". This is necessary for the ",(0,s.jsx)(t.code,{children:"AvPayerSelect"})," select to only contain payers that are accesible and related to the organization specified, and not all the organizations that the user belongs."]}),"\n",(0,s.jsx)(t.p,{children:"Example: customerId: '12345'"}),"\n",(0,s.jsx)(t.h4,{id:"region-string",children:(0,s.jsx)(t.code,{children:"region: string"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"extended-payers"})," API from ",(0,s.jsx)(t.code,{children:"aries"})," requires a ",(0,s.jsx)(t.code,{children:"state"})," param that must be a string. When ",(0,s.jsx)(t.code,{children:"AvPayerSelect"})," has a ",(0,s.jsx)(t.code,{children:"region"})," prop, then the results of the ",(0,s.jsx)(t.code,{children:"all"})," call to ",(0,s.jsx)(t.code,{children:"extended-payers"})," will be filtered, containing only payers that are accessible from that region. This is necessary for the ",(0,s.jsx)(t.code,{children:"AvPayerSelect"})," select to only contain payers for that user's current region in the app, instead of all the payers from every region."]}),"\n",(0,s.jsx)(t.p,{children:"Example: region: 'FL'"}),"\n",(0,s.jsx)(t.h4,{id:"trantypecode-string",children:(0,s.jsx)(t.code,{children:"tranTypeCode: string"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"extended-payers"})," API from ",(0,s.jsx)(t.code,{children:"aries"})," requires a ",(0,s.jsx)(t.code,{children:"tranTypeCode"})," prop that must be a string. Currently only the following transaction type codes are supported ",(0,s.jsx)(t.code,{children:"1, 2, 3, 5"}),". Additionally ",(0,s.jsx)(t.code,{children:"EBREACT"})," has been added to support payer list for E&B react payers. by the backing API. This will be passed as a request param so that the results of the ",(0,s.jsx)(t.code,{children:"all"})," call to ",(0,s.jsx)(t.code,{children:"extended-payers"})," will be filtered, containing only payers that have either a security resource or EPDM route for the specified transaction type code."]}),"\n",(0,s.jsx)(t.p,{children:"Example: tranTypeCode: '1'"})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>i});var n=r(6540);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);