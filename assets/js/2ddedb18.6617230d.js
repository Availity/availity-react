"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[3921],{2041:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"components/hooks/use-toggle","title":"useToggle","description":"Returns a boolean that can easily be toggled. Useful for loaders, and toggle components.","source":"@site/docs/components/hooks/use-toggle.md","sourceDirName":"components/hooks","slug":"/components/hooks/use-toggle","permalink":"/availity-react/components/hooks/use-toggle","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/components/hooks/use-toggle.md","tags":[],"version":"current","frontMatter":{"title":"useToggle"},"sidebar":"someSidebar","previous":{"title":"useTimeout","permalink":"/availity-react/components/hooks/use-timeout"},"next":{"title":"usePermissions","permalink":"/availity-react/components/hooks/use-permissions"}}');var s=t(4848),l=t(8453);const a={title:"useToggle"},i=void 0,r={},c=[{value:"Example",id:"example",level:3},{value:"Props",id:"props",level:3},{value:"<code>initialState?: boolean</code>",id:"initialstate-boolean",level:4}];function d(e){const o={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.p,{children:"Returns a boolean that can easily be toggled. Useful for loaders, and toggle components."}),"\n",(0,s.jsx)(o.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:"import React from 'react';\nimport { useToggle } from '@availity/hooks';\n\nconst Example = () => {\n  const [isToggled, toggle] = useToggle();\n\n  return <div onClick={toggle}>{isToggled ? 'Hello' : 'World'}</div>;\n};\n"})}),"\n",(0,s.jsx)(o.p,{children:"You can also pass the state you want to set the toggle to. If it hasn't changed, it will not perform a state update."}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-jsx",children:"import React from 'react';\nimport { useToggle } from '@availity/hooks';\n\n// This component will never re-render because the toggle is already set to `true`\nconst Example = () => {\n  const [isToggled, toggle] = useToggle(true);\n\n  return (\n    <div onClick={() => toggle(true)}>{isToggled ? 'Hello' : 'World'}</div>\n  );\n};\n"})}),"\n",(0,s.jsx)(o.h3,{id:"props",children:"Props"}),"\n",(0,s.jsx)(o.h4,{id:"initialstate-boolean",children:(0,s.jsx)(o.code,{children:"initialState?: boolean"})}),"\n",(0,s.jsxs)(o.p,{children:["The intital state of the toggle. ",(0,s.jsx)(o.strong,{children:"Default:"})," ",(0,s.jsx)(o.code,{children:"false"})]})]})}function u(e={}){const{wrapper:o}={...(0,l.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>a,x:()=>i});var n=t(6540);const s={},l=n.createContext(s);function a(e){const o=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(l.Provider,{value:o},e.children)}}}]);