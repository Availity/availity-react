"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[9152],{2557:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>i,frontMatter:()=>r,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"components/hooks/use-update-nav","title":"useUpdateNav","description":"This hook uses react-router-dom and @availity/message-core to send a browser message to the nav every time the url changes. It does not accept any arguments or return any data.","source":"@site/docs/components/hooks/use-update-nav.md","sourceDirName":"components/hooks","slug":"/components/hooks/use-update-nav","permalink":"/availity-react/components/hooks/use-update-nav","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/components/hooks/use-update-nav.md","tags":[],"version":"current","frontMatter":{"title":"useUpdateNav"}}');var a=n(4848),s=n(8453);const r={title:"useUpdateNav"},c=void 0,u={},p=[{value:"Example",id:"example",level:3}];function d(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["This hook uses ",(0,a.jsx)(t.code,{children:"react-router-dom"})," and ",(0,a.jsx)(t.code,{children:"@availity/message-core"})," to send a browser message to the nav every time the url changes. It does not accept any arguments or return any data."]}),"\n",(0,a.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(t.p,{children:["The hook must be a descendant of a ",(0,a.jsx)(t.code,{children:"Router"})," component. In the example below we have the app setup to only need to use the hook once. This is the recommended setup."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"import React from 'react';\nimport { useUpdateNav } from '@availity/hooks';\nimport { Router, Routes, Route } from 'react-router-dom';\nimport { Home, Search } from './components';\n\nconst Example = () => {\n  useUpdateNav();\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/search\" element={<Search />} />\n    </Routes>\n  );\n};\n\nconst App = () => {\n  return (\n    <Router>\n      <Example />\n    </Router>\n  );\n};\n"})}),"\n",(0,a.jsxs)(t.p,{children:["It is also possible to make a wrapper component using the ",(0,a.jsx)(t.code,{children:"useUpdateNav"})," hook and ",(0,a.jsx)(t.code,{children:"Outlet"})," component from ",(0,a.jsx)(t.code,{children:"react-router-dom"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"import React from 'react';\nimport { useUpdateNav } from '@availity/hooks';\nimport { Router, Routes, Route, Outlet } from 'react-router-dom';\nimport { Home, Search } from './components';\n\nconst RouteWrapper = () => {\n  useUpdateNav();\n\n  return <Outlet />;\n};\n\nconst App = () => {\n  return (\n    <Router>\n      <Route element={<RouteWrapper />}>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/search\" element={<Search />} />\n      </Route>\n    </Router>\n  );\n};\n"})})]})}function i(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var o=n(6540);const a={},s=o.createContext(a);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);