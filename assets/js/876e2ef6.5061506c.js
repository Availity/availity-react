"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[1028],{8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>d});var a=n(6540);const l={},i=a.createContext(l);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),a.createElement(i.Provider,{value:t},e.children)}},9503:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"form/date/components/date-range-field","title":"<DateRangeField />","description":"The same as DateRange but with a Label that appears above the input and a Feedback that appears below the input.","source":"@site/docs/form/date/components/date-range-field.md","sourceDirName":"form/date/components","slug":"/form/date/components/date-range-field","permalink":"/availity-react/form/date/components/date-range-field","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/date/components/date-range-field.md","tags":[],"version":"current","frontMatter":{"title":"<DateRangeField />"},"sidebar":"someSidebar","previous":{"title":"<DateRange />","permalink":"/availity-react/form/date/components/date-range"},"next":{"title":"Getting Started","permalink":"/availity-react/form/phone/"}}');var l=n(4848),i=n(8453);const o={title:"<DateRangeField />"},d=void 0,r={},s=[{value:"Example",id:"example",level:3},{value:"Live example",id:"live-example",level:4},{value:"Props",id:"props",level:3},{value:"<code>name: string</code>",id:"name-string",level:4},{value:"<code>label?: string</code>",id:"label-string",level:4},{value:"<code>labelClass?: string</code>",id:"labelclass-string",level:4},{value:"<code>labelHidden?: boolean</code>",id:"labelhidden-boolean",level:4},{value:"<code>labelAttrs?: React.HTMLAttributes&lt;HTMLLabelElement&gt;</code>",id:"labelattrs-reacthtmlattributeshtmllabelelement",level:4},{value:"<code>helpId?: string</code>",id:"helpid-string",level:4},{value:"<code>required?: boolean</code>",id:"required-boolean",level:4},{value:"<code>isHelpVideoType?: boolean</code>",id:"ishelpvideotype-boolean",level:4}];function c(e){const t={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(t.p,{children:["The same as ",(0,l.jsx)(t.code,{children:"DateRange"})," but with a ",(0,l.jsx)(t.code,{children:"Label"})," that appears above the input and a ",(0,l.jsx)(t.code,{children:"Feedback"})," that appears below the input."]}),"\n",(0,l.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-jsx",children:"import React from 'react';\nimport { Form } from '@availity/form';\nimport { DateRangeField } from '@availity/date';\nimport '@availity/date/styles.scss';\nimport { Button } from 'reactstrap';\nimport { dateRange } from '@availity/yup';\nimport moment from 'moment';\nimport * as yup from 'yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      dateOfService: {\n        startDate: moment().format('YYYY-MM-DD'),\n        endDate: moment().format('YYYY-MM-DD'),\n      },\n    }}\n    onSubmit={(values) => console.log(values)}\n    validationSchema={yup.object().shape({\n      dateOfService: dateRange(\n        {\n          min: moment().subtract(7, 'day').format('MM/DD/YYYY'),\n          max: moment().add(7, 'day').format('MM/DD/YYYY'),\n          format: 'MM/DD/YYYY',\n        },\n        `Date must be between ${moment()\n          .subtract(7, 'day')\n          .format('MM/DD/YYYY')} and ${moment()\n          .add(7, 'day')\n          .format('MM/DD/YYYY')}`\n      )\n        .typeError('This field is invalid.')\n        .required('This field is required.'),\n    })}\n  >\n    <DateRangeField\n      id=\"dateOfService\"\n      label=\"Date of Service\"\n      name=\"dateOfService\"\n      min={{ value: 7, units: 'day' }}\n      max={{ value: 7, units: 'day' }}\n    />\n    <Button color=\"primary\" type=\"submit\">\n      Submit\n    </Button>\n  </Form>\n);\n"})}),"\n",(0,l.jsx)(t.h4,{id:"live-example",children:"Live example"}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.a,{href:"https://availity.github.io/availity-react/storybook/?path=/docs/bootstrap-components-date--date-range-field",children:"Storybook"})}),"\n",(0,l.jsx)(t.h3,{id:"props",children:"Props"}),"\n",(0,l.jsxs)(t.p,{children:["Extends ",(0,l.jsx)(t.a,{href:"/form/date/components/date-range#props",children:"DateRange Props"}),"."]}),"\n",(0,l.jsx)(t.h4,{id:"name-string",children:(0,l.jsx)(t.code,{children:"name: string"})}),"\n",(0,l.jsxs)(t.p,{children:["The name of the field. Will be the key of the selected date that comes through in the values of the ",(0,l.jsx)(t.code,{children:"onSubmit"})," callback."]}),"\n",(0,l.jsx)(t.h4,{id:"label-string",children:(0,l.jsx)(t.code,{children:"label?: string"})}),"\n",(0,l.jsxs)(t.p,{children:["The text that renders inside the ",(0,l.jsx)(t.code,{children:"Label"})," above the input."]}),"\n",(0,l.jsx)(t.h4,{id:"labelclass-string",children:(0,l.jsx)(t.code,{children:"labelClass?: string"})}),"\n",(0,l.jsxs)(t.p,{children:["The name of the class for the label. Will be passed to the ",(0,l.jsx)(t.code,{children:"className"})," prop of the label in the field."]}),"\n",(0,l.jsx)(t.h4,{id:"labelhidden-boolean",children:(0,l.jsx)(t.code,{children:"labelHidden?: boolean"})}),"\n",(0,l.jsxs)(t.p,{children:["Used to control if the label is displayed. When set to ",(0,l.jsx)(t.code,{children:"true"}),", the label in the field won't be visible."]}),"\n",(0,l.jsx)(t.h4,{id:"labelattrs-reacthtmlattributeshtmllabelelement",children:(0,l.jsx)(t.code,{children:"labelAttrs?: React.HTMLAttributes<HTMLLabelElement>"})}),"\n",(0,l.jsx)(t.p,{children:"Pass additional attributes to the label"}),"\n",(0,l.jsx)(t.h4,{id:"helpid-string",children:(0,l.jsx)(t.code,{children:"helpId?: string"})}),"\n",(0,l.jsxs)(t.p,{children:["Help topic id, adds ",(0,l.jsx)(t.code,{children:"<FieldHelpIcon/>"})," next to the label (should not be within label for accessibility)."]}),"\n",(0,l.jsx)(t.h4,{id:"required-boolean",children:(0,l.jsx)(t.code,{children:"required?: boolean"})}),"\n",(0,l.jsxs)(t.p,{children:["Will add ",(0,l.jsx)(t.code,{children:"<RequiredAsterisk />"})," to label."]}),"\n",(0,l.jsx)(t.h4,{id:"ishelpvideotype-boolean",children:(0,l.jsx)(t.code,{children:"isHelpVideoType?: boolean"})}),"\n",(0,l.jsxs)(t.p,{children:["Allows the type of ",(0,l.jsx)(t.code,{children:"<FieldHelpIcon/>"})," to be changed between help-icon and video-help"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);