"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[6439],{2417:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"form/upload/upload-progress-bar","title":"<UploadProgressBar />","description":"The raw progress bar to be used when making your own.","source":"@site/docs/form/upload/upload-progress-bar.md","sourceDirName":"form/upload","slug":"/form/upload/upload-progress-bar","permalink":"/availity-react/form/upload/upload-progress-bar","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/upload/upload-progress-bar.md","tags":[],"version":"current","frontMatter":{"title":"<UploadProgressBar />"},"sidebar":"someSidebar","previous":{"title":"<FilePickerBtn />","permalink":"/availity-react/form/upload/file-picker-btn"}}');var n=r(4848),a=r(8453);const l={title:"<UploadProgressBar />"},s=void 0,i={},c=[{value:"Example",id:"example",level:3},{value:"Props",id:"props",level:3},{value:"<code>upload?: UploadCore</code>",id:"upload-uploadcore",level:4},{value:"<code>onProgress?: (upload: UploadCore) =&gt; void</code>",id:"onprogress-upload-uploadcore--void",level:4},{value:"<code>onSuccess?: (upload: UploadCore) =&gt; void</code>",id:"onsuccess-upload-uploadcore--void",level:4},{value:"<code>onError?: (upload: UploadCore) =&gt; void</code>",id:"onerror-upload-uploadcore--void",level:4},{value:"<code>complete?: boolean</code>",id:"complete-boolean",level:4},{value:"<code>striped?: boolean</code>",id:"striped-boolean",level:4},{value:"<code>animated?: boolean</code>",id:"animated-boolean",level:4},{value:"<code>color?: string</code>",id:"color-string",level:4}];function t(e){const o={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.p,{children:"The raw progress bar to be used when making your own."}),"\n",(0,n.jsx)(o.h3,{id:"example",children:"Example"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-jsx",children:"import React from 'react';\nimport { UploadProgressBar } from '@availity/upload';\n\nconst Example = () => <UploadProgressBar upload={uploadInstance} animated />;\n"})}),"\n",(0,n.jsx)(o.h3,{id:"props",children:"Props"}),"\n",(0,n.jsx)(o.h4,{id:"upload-uploadcore",children:(0,n.jsx)(o.code,{children:"upload?: UploadCore"})}),"\n",(0,n.jsxs)(o.p,{children:["The upload instance returned by creating a ",(0,n.jsx)(o.code,{children:"new Upload"})," via ",(0,n.jsx)(o.a,{href:"https://github.com/Availity/sdk-js/tree/master/packages/upload-core#readme",children:"upload-core"}),"."]}),"\n",(0,n.jsx)(o.h4,{id:"onprogress-upload-uploadcore--void",children:(0,n.jsx)(o.code,{children:"onProgress?: (upload: UploadCore) => void"})}),"\n",(0,n.jsxs)(o.p,{children:["Callback function to hook into the ",(0,n.jsx)(o.code,{children:"onProgress"})," within the Upload instance provided in the ",(0,n.jsx)(o.code,{children:"upload"})," prop."]}),"\n",(0,n.jsx)(o.h4,{id:"onsuccess-upload-uploadcore--void",children:(0,n.jsx)(o.code,{children:"onSuccess?: (upload: UploadCore) => void"})}),"\n",(0,n.jsxs)(o.p,{children:["Callback function to hook into the ",(0,n.jsx)(o.code,{children:"onSuccess"})," within the Upload instance provided in the ",(0,n.jsx)(o.code,{children:"upload"})," prop."]}),"\n",(0,n.jsx)(o.h4,{id:"onerror-upload-uploadcore--void",children:(0,n.jsx)(o.code,{children:"onError?: (upload: UploadCore) => void"})}),"\n",(0,n.jsxs)(o.p,{children:["Callback function to hook into the ",(0,n.jsx)(o.code,{children:"onError"})," within the Upload instance provided in the ",(0,n.jsx)(o.code,{children:"upload"})," prop."]}),"\n",(0,n.jsx)(o.h4,{id:"complete-boolean",children:(0,n.jsx)(o.code,{children:"complete?: boolean"})}),"\n",(0,n.jsx)(o.p,{children:'Triggers the "complete" style in the progress bar. When true, a checkmark appears at the end of the progress bar.'}),"\n",(0,n.jsx)(o.h4,{id:"striped-boolean",children:(0,n.jsx)(o.code,{children:"striped?: boolean"})}),"\n",(0,n.jsx)(o.p,{children:'Triggers the "striped" style in the progress bar.'}),"\n",(0,n.jsx)(o.h4,{id:"animated-boolean",children:(0,n.jsx)(o.code,{children:"animated?: boolean"})}),"\n",(0,n.jsxs)(o.p,{children:["When ",(0,n.jsx)(o.code,{children:"true"})," the progress bar has animated stripes while uploading is in progress."]}),"\n",(0,n.jsx)(o.h4,{id:"color-string",children:(0,n.jsx)(o.code,{children:"color?: string"})}),"\n",(0,n.jsxs)(o.p,{children:["Color of the progress bar. ",(0,n.jsx)(o.strong,{children:"Default:"})," ",(0,n.jsx)(o.code,{children:"success"})]})]})}function p(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(t,{...e})}):t(e)}},8453:(e,o,r)=>{r.d(o,{R:()=>l,x:()=>s});var d=r(6540);const n={},a=d.createContext(n);function l(e){const o=d.useContext(a);return d.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),d.createElement(a.Provider,{value:o},e.children)}}}]);