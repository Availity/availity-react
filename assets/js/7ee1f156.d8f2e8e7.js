"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[3023],{8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>l});var s=n(6540);const t={},o=s.createContext(t);function a(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(o.Provider,{value:r},e.children)}},9726:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"bootstrap-components/progress","title":"Progress","description":"Availity Progress Bar","source":"@site/docs/bootstrap-components/progress.mdx","sourceDirName":"bootstrap-components","slug":"/bootstrap-components/progress","permalink":"/availity-react/bootstrap-components/progress","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/bootstrap-components/progress.mdx","tags":[],"version":"current","frontMatter":{"title":"Progress"},"sidebar":"someSidebar","previous":{"title":"Badge","permalink":"/availity-react/bootstrap-components/badge"},"next":{"title":"Getting Started","permalink":"/availity-react/bootstrap-components/spaces/"}}');var t=n(4848),o=n(8453);const a={title:"Progress"},l=void 0,i={},c=[{value:"Installation",id:"installation",level:3},{value:"Example",id:"example",level:3},{value:"Live example",id:"live-example",level:4},{value:"Props",id:"props",level:3},{value:"<code>tag?: React.ComponentType | string</code>",id:"tag-reactcomponenttype--string",level:4},{value:"<code>animated?: boolean</code>",id:"animated-boolean",level:4},{value:"<code>striped?: boolean</code>",id:"striped-boolean",level:4},{value:"<code>complete?: boolean</code>",id:"complete-boolean",level:4},{value:"<code>value?: number</code>",id:"value-number",level:4},{value:"<code>max? number</code>",id:"max-number",level:4},{value:"<code>color?: string</code>",id:"color-string",level:4}];function d(e){const r={a:"a",code:"code",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"Availity Progress Bar"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://www.npmjs.com/package/@availity/progress",children:(0,t.jsx)(r.img,{src:"https://img.shields.io/npm/v/@availity/progress.svg?style=for-the-badge",alt:"Version"})})}),"\n",(0,t.jsx)(r.h3,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(r.p,{children:"npm"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm install @availity/progress\n"})}),"\n",(0,t.jsx)(r.p,{children:"Yarn"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"yarn add @availity/progress\n"})}),"\n",(0,t.jsx)(r.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-jsx",children:"import React from 'react';\nimport Progress from '@availity/progress';\n\nconst Example = () => (\n  <>\n    <p>50% Complete</p>\n    <Progress animated={false} striped complete={false} value={50} max={100} />\n  </>\n);\n"})}),"\n",(0,t.jsx)(r.h4,{id:"live-example",children:"Live example"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://availity.github.io/availity-react/storybook/?path=/story/bootstrap-components-progress--default",children:"Storybook"})}),"\n",(0,t.jsx)(r.h3,{id:"props",children:"Props"}),"\n",(0,t.jsx)(r.h4,{id:"tag-reactcomponenttype--string",children:(0,t.jsx)(r.code,{children:"tag?: React.ComponentType | string"})}),"\n",(0,t.jsxs)(r.p,{children:["The tag to render the progress bar as. ",(0,t.jsx)(r.strong,{children:"Default:"})," ",(0,t.jsx)(r.code,{children:"<div>"}),"."]}),"\n",(0,t.jsx)(r.h4,{id:"animated-boolean",children:(0,t.jsx)(r.code,{children:"animated?: boolean"})}),"\n",(0,t.jsx)(r.p,{children:'Triggers the "animated" style in the progress bar.'}),"\n",(0,t.jsx)(r.h4,{id:"striped-boolean",children:(0,t.jsx)(r.code,{children:"striped?: boolean"})}),"\n",(0,t.jsx)(r.p,{children:'Triggers the "striped" style in the progress bar.'}),"\n",(0,t.jsx)(r.h4,{id:"complete-boolean",children:(0,t.jsx)(r.code,{children:"complete?: boolean"})}),"\n",(0,t.jsx)(r.p,{children:'Triggers the "complete" style in the progress bar. When true, a checkmark appears at the end of the progress bar'}),"\n",(0,t.jsx)(r.h4,{id:"value-number",children:(0,t.jsx)(r.code,{children:"value?: number"})}),"\n",(0,t.jsxs)(r.p,{children:["The amount of the progress bar that should be filled (relative to the ",(0,t.jsx)(r.code,{children:"max"}),") ",(0,t.jsx)(r.strong,{children:"Default:"})," ",(0,t.jsx)(r.code,{children:"0"}),"."]}),"\n",(0,t.jsx)(r.h4,{id:"max-number",children:(0,t.jsx)(r.code,{children:"max? number"})}),"\n",(0,t.jsxs)(r.p,{children:["The maximum amount of the progress bar. ",(0,t.jsx)(r.strong,{children:"Default:"})," ",(0,t.jsx)(r.code,{children:"100"}),"."]}),"\n",(0,t.jsx)(r.h4,{id:"color-string",children:(0,t.jsx)(r.code,{children:"color?: string"})}),"\n",(0,t.jsxs)(r.p,{children:["The color of the progress bar. ",(0,t.jsx)(r.strong,{children:"Default:"})," ",(0,t.jsx)(r.code,{children:"success"}),"."]})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);