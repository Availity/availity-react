"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[3225],{5315:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"form/select/components/select","title":"<Select />","description":"Select dropdown without a Label or Feedback","source":"@site/docs/form/select/components/select.md","sourceDirName":"form/select/components","slug":"/form/select/components/select","permalink":"/availity-react/form/select/components/select","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/select/components/select.md","tags":[],"version":"current","frontMatter":{"title":"<Select />"},"sidebar":"someSidebar","previous":{"title":"Getting Started","permalink":"/availity-react/form/select/"},"next":{"title":"<SelectField />","permalink":"/availity-react/form/select/components/select-field"}}');var o=n(4848),i=n(8453);const s={title:"<Select />"},r=void 0,d={},a=[{value:"Additional Resources",id:"additional-resources",level:3},{value:"Example",id:"example",level:3},{value:"Live example: Storybook",id:"live-example-storybook",level:4},{value:"Props",id:"props",level:3},{value:"<code>name: string</code>",id:"name-string",level:4},{value:"<code>options: object[]</code>",id:"options-object",level:3},{value:"<code>raw?: boolean</code>",id:"raw-boolean",level:3},{value:"<code>valueKey?: string</code>",id:"valuekey-string",level:4},{value:"<code>labelKey?: string</code>",id:"labelkey-string",level:4},{value:"<code>helpMessage?: string</code>",id:"helpmessage-string",level:4},{value:"<code>feedback?: boolean</code>",id:"feedback-boolean",level:4},{value:"<code>required?: boolean</code>",id:"required-boolean",level:4},{value:"<code>maxLength?: number</code>",id:"maxlength-number",level:4},{value:"<code>selectRef?: Ref</code>",id:"selectref-ref",level:4},{value:"<code>createable?: boolean</code>",id:"createable-boolean",level:4},{value:"<code>allowSelectAll?: boolean</code>",id:"allowselectall-boolean",level:4},{value:"<code>clearButtonClassName?: string</code>",id:"clearbuttonclassname-string",level:4},{value:"<code>clearButtonText?: string</code>",id:"clearbuttontext-string",level:4},{value:"<code>clearButtonProps?: ButtonProps</code>",id:"clearbuttonprops-buttonprops",level:4},{value:"<code>waitUntilFocused?: boolean</code>",id:"waituntilfocused-boolean",level:3},{value:"<code>autofill?: boolean | AutoFillType</code>",id:"autofill-boolean--autofilltype",level:3}];function c(e){const l={a:"a",code:"code",em:"em",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(l.p,{children:"Select dropdown without a Label or Feedback"}),"\n",(0,o.jsx)(l.h3,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,o.jsxs)(l.ul,{children:["\n",(0,o.jsxs)(l.li,{children:[(0,o.jsx)(l.code,{children:"selectStyles(showError, styles)"}),"\n",(0,o.jsxs)(l.ul,{children:["\n",(0,o.jsx)(l.li,{children:"Extract styling of this component for cases when react-select is used directly."}),"\n",(0,o.jsx)(l.li,{children:"Returns style and theme object to be spread on Select"}),"\n",(0,o.jsxs)(l.li,{children:["Args","\n",(0,o.jsxs)(l.ul,{children:["\n",(0,o.jsxs)(l.li,{children:[(0,o.jsx)(l.code,{children:"showError?: boolean"})," if error styling should be applied"]}),"\n",(0,o.jsxs)(l.li,{children:[(0,o.jsx)(l.code,{children:"styles?: StylesConfig object"})," refer to react-select docs for info on styles"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(l.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(l.pre,{children:(0,o.jsx)(l.code,{className:"language-jsx",children:"import React from 'react';\nimport { Form } from '@availity/form';\nimport Select, { SelectField } from '@availity/select';\nimport { Button } from 'reactstrap';\nimport * as yup from 'yup';\nimport '@availity/yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      justTheInput: undefined,\n    }}\n    onSubmit={(values) => window.alert(JSON.stringify(values))}\n    validationSchema={yup.object().shape({\n      justTheInput: yup.string().required('This field is required.'),\n    })}\n  >\n    <Select\n      id=\"justTheInput\"\n      name=\"justTheInput\"\n      isMulti={false}\n      options={[\n        { label: 'Option 1', value: 1 },\n        { label: 'Option 2', value: 2 },\n        { label: 'Option 3', value: 3 },\n      ]}\n    />\n\n    <Button className=\"mt-3\" color=\"primary\" type=\"submit\">\n      Submit\n    </Button>\n  </Form>\n);\n"})}),"\n",(0,o.jsxs)(l.h4,{id:"live-example-storybook",children:["Live example: ",(0,o.jsx)(l.a,{href:"https://availity.github.io/availity-react/storybook/?path=/docs/bootstrap-components-select--docs",children:"Storybook"})]}),"\n",(0,o.jsx)(l.h3,{id:"props",children:"Props"}),"\n",(0,o.jsxs)(l.p,{children:["See ",(0,o.jsx)(l.a,{href:"https://github.com/JedWatson/react-select",children:"react-select"})," and ",(0,o.jsx)(l.a,{href:"https://github.com/vtaits/react-select-async-paginate",children:"react-select-async-paginate"})," for additional props."]}),"\n",(0,o.jsx)(l.h4,{id:"name-string",children:(0,o.jsx)(l.code,{children:"name: string"})}),"\n",(0,o.jsxs)(l.p,{children:["The name of the field. Will be the key of the selected option(s) that come through in the values of the ",(0,o.jsx)(l.code,{children:"onSubmit"})," callback of the form."]}),"\n",(0,o.jsx)(l.h3,{id:"options-object",children:(0,o.jsx)(l.code,{children:"options: object[]"})}),"\n",(0,o.jsxs)(l.p,{children:["Array of options that populate the select menu. Grouped options are also supported, but must include the property ",(0,o.jsx)(l.code,{children:"type: 'group'"}),"."]}),"\n",(0,o.jsx)(l.pre,{children:(0,o.jsx)(l.code,{className:"language-js",children:"const groupedOptions = [\n  {\n    label: 'options',\n    options: [\n      { label: 'Option 1', value: 'value for option 1' },\n      { label: 'Option 2', value: 'value for option 2' },\n      { label: 'Option 3', value: 'value for option 3' },\n      { label: 'Option 4', value: 'value for option 4' },\n    ],\n    type: 'group',\n  },\n];\n"})}),"\n",(0,o.jsx)(l.h3,{id:"raw-boolean",children:(0,o.jsx)(l.code,{children:"raw?: boolean"})}),"\n",(0,o.jsxs)(l.p,{children:["If ",(0,o.jsx)(l.code,{children:"true"}),", the entire object of the selected value is returned as the value instead of the value for the ",(0,o.jsx)(l.code,{children:"valueKey"})," within the object."]}),"\n",(0,o.jsx)(l.h4,{id:"valuekey-string",children:(0,o.jsx)(l.code,{children:"valueKey?: string"})}),"\n",(0,o.jsxs)(l.p,{children:["The key of the value to return when selected. ",(0,o.jsx)(l.strong,{children:"Default:"})," ",(0,o.jsx)(l.code,{children:'"value"'})]}),"\n",(0,o.jsx)(l.h4,{id:"labelkey-string",children:(0,o.jsx)(l.code,{children:"labelKey?: string"})}),"\n",(0,o.jsxs)(l.p,{children:["The key of the label to render in the dropdown for the user to see. ",(0,o.jsx)(l.strong,{children:"Default:"})," ",(0,o.jsx)(l.code,{children:'"label"'})]}),"\n",(0,o.jsx)(l.h4,{id:"helpmessage-string",children:(0,o.jsx)(l.code,{children:"helpMessage?: string"})}),"\n",(0,o.jsxs)(l.p,{children:["Adds hidden help message to placeholder so it is read with ",(0,o.jsx)(l.code,{children:"aria-describedby"})," (should match visible help message)."]}),"\n",(0,o.jsx)(l.h4,{id:"feedback-boolean",children:(0,o.jsx)(l.code,{children:"feedback?: boolean"})}),"\n",(0,o.jsxs)(l.p,{children:["Will add default ",(0,o.jsx)(l.code,{children:"<Feedback />"})," id to ",(0,o.jsx)(l.code,{children:"aria-errormessage"}),"."]}),"\n",(0,o.jsx)(l.h4,{id:"required-boolean",children:(0,o.jsx)(l.code,{children:"required?: boolean"})}),"\n",(0,o.jsxs)(l.p,{children:["Will add ",(0,o.jsx)(l.code,{children:"aria-required"})," to input."]}),"\n",(0,o.jsx)(l.h4,{id:"maxlength-number",children:(0,o.jsx)(l.code,{children:"maxLength?: number"})}),"\n",(0,o.jsxs)(l.p,{children:["The maximum number of options that can be selected ( when ",(0,o.jsx)(l.code,{children:"isMulti"})," is ",(0,o.jsx)(l.code,{children:"true"}),")"]}),"\n",(0,o.jsx)(l.h4,{id:"selectref-ref",children:(0,o.jsx)(l.code,{children:"selectRef?: Ref"})}),"\n",(0,o.jsxs)(l.p,{children:["Ref passed to ",(0,o.jsx)(l.code,{children:"react-select-async-paginate"})," component if in async mode."]}),"\n",(0,o.jsx)(l.h4,{id:"createable-boolean",children:(0,o.jsx)(l.code,{children:"createable?: boolean"})}),"\n",(0,o.jsxs)(l.p,{children:["Allow new items to be created if not found. ",(0,o.jsx)(l.strong,{children:"Default:"})," ",(0,o.jsx)(l.code,{children:"false"}),"."]}),"\n",(0,o.jsx)(l.h4,{id:"allowselectall-boolean",children:(0,o.jsx)(l.code,{children:"allowSelectAll?: boolean"})}),"\n",(0,o.jsxs)(l.p,{children:["Adds a ",(0,o.jsx)(l.code,{children:"Select all"})," option ( when ",(0,o.jsx)(l.code,{children:"isMulti"})," is ",(0,o.jsx)(l.code,{children:"true"}),"). Note: ",(0,o.jsx)(l.code,{children:"allowSelectAll"})," is ignored when ",(0,o.jsx)(l.code,{children:"loadOptions"})," is defined."]}),"\n",(0,o.jsx)(l.h4,{id:"clearbuttonclassname-string",children:(0,o.jsx)(l.code,{children:"clearButtonClassName?: string"})}),"\n",(0,o.jsxs)(l.p,{children:["Class names to add to clear button (only available when ",(0,o.jsx)(l.code,{children:"isMulti"})," or ",(0,o.jsx)(l.code,{children:"isClearable"}),"). ",(0,o.jsx)(l.strong,{children:"Default:"})," ",(0,o.jsx)(l.code,{children:"btn btn-link link"})]}),"\n",(0,o.jsx)(l.h4,{id:"clearbuttontext-string",children:(0,o.jsx)(l.code,{children:"clearButtonText?: string"})}),"\n",(0,o.jsxs)(l.p,{children:["Text that should be displayed in the clear button (only available when ",(0,o.jsx)(l.code,{children:"isMulti"})," or ",(0,o.jsx)(l.code,{children:"isClearable"}),"). ",(0,o.jsx)(l.strong,{children:"Default:"})," ",(0,o.jsx)(l.code,{children:"clear"})]}),"\n",(0,o.jsx)(l.h4,{id:"clearbuttonprops-buttonprops",children:(0,o.jsx)(l.code,{children:"clearButtonProps?: ButtonProps"})}),"\n",(0,o.jsxs)(l.p,{children:["Additional properties that should be set on the clear button (only available when ",(0,o.jsx)(l.code,{children:"isMulti"})," or ",(0,o.jsx)(l.code,{children:"isClearable"}),")."]}),"\n",(0,o.jsx)(l.h3,{id:"waituntilfocused-boolean",children:(0,o.jsx)(l.code,{children:"waitUntilFocused?: boolean"})}),"\n",(0,o.jsxs)(l.p,{children:["When true, the network request is not made until the dropdown has been focused. Defaults to ",(0,o.jsx)(l.code,{children:"false"}),"."]}),"\n",(0,o.jsx)(l.h3,{id:"autofill-boolean--autofilltype",children:(0,o.jsx)(l.code,{children:"autofill?: boolean | AutoFillType"})}),"\n",(0,o.jsxs)(l.p,{children:["If ",(0,o.jsx)(l.code,{children:"true"}),", when the value of the dropdown changes, if the ",(0,o.jsx)(l.code,{children:"isMulti"})," prop is ",(0,o.jsx)(l.code,{children:"false"})," ",(0,o.jsx)(l.em,{children:"and"})," the new value of the dropdown is an object, all fields on the form corresponding to the new value are auto-filled. In order for a field to be auto-filled, the ",(0,o.jsx)(l.code,{children:"name"})," property on the field ",(0,o.jsx)(l.em,{children:"must"})," match the key inside the new value."]}),"\n",(0,o.jsxs)(l.p,{children:["For example, if the new value is ",(0,o.jsx)(l.code,{children:'{ "payer": "Availity" }'}),', in order for the payer input in the form to be auto-filled to "Availity", the ',(0,o.jsx)(l.code,{children:"name"}),' prop on the input must be "payer".']}),"\n",(0,o.jsxs)(l.p,{children:["If ",(0,o.jsx)(l.code,{children:"autofill"})," is an object, when the value of the dropdown changes, if the ",(0,o.jsx)(l.code,{children:"isMulti"})," prop is ",(0,o.jsx)(l.code,{children:"false"})," ",(0,o.jsx)(l.em,{children:"and"})," the new value of the dropdown is an object, all fields on the form corresponding to the keys in the ",(0,o.jsx)(l.code,{children:"autofill"})," prop will be auto-filled."]}),"\n",(0,o.jsxs)(l.p,{children:["When ",(0,o.jsx)(l.code,{children:"autofill"})," is an object, the values in the object can be a string or a function. When a string, the key in the ",(0,o.jsx)(l.code,{children:"autofill"})," prop gets auto-filled to that path on the selected option. When a function, it gets called with the selected option, and the key in the ",(0,o.jsx)(l.code,{children:"autofill"})," prop gets auto-filled to the return value of the function."]}),"\n",(0,o.jsxs)(l.p,{children:["For example, if the new value is ",(0,o.jsx)(l.code,{children:'{ "payer": { "name": "Availity", "id": "1" } }'}),', in order for the "payerName", "payerId", and "payerNameAndId" inputs to be auto-filled to "Availity", "1", and "1 - Availity" respectively, the ',(0,o.jsx)(l.code,{children:"autofill"})," prop should be:"]}),"\n",(0,o.jsx)(l.pre,{children:(0,o.jsx)(l.code,{className:"language-js",children:"{\n  payerName: 'payer.name',\n  payerId: 'payer.id',\n  payerNameAndId: opt => `${opt.payer.id} - ${opt.payer.name}`,\n}\n"})})]})}function h(e={}){const{wrapper:l}={...(0,i.R)(),...e.components};return l?(0,o.jsx)(l,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,l,n)=>{n.d(l,{R:()=>s,x:()=>r});var t=n(6540);const o={},i=t.createContext(o);function s(e){const l=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function r(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:l},e.children)}}}]);