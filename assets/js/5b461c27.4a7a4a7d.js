"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[393],{908:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"form/migrating","title":"Migrating from reactstrap validation","description":"The primary difference in developing with availity-reactstrap-validation and @availity/form is validation. With availity-reactstrap-validation, we define validation schemas on the input components in the form with the validate prop, like so:","source":"@site/docs/form/migrating.md","sourceDirName":"form","slug":"/form/migrating","permalink":"/availity-react/form/migrating","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/migrating.md","tags":[],"version":"current","frontMatter":{"title":"Migrating from reactstrap validation"},"sidebar":"someSidebar","previous":{"title":"Getting Started","permalink":"/availity-react/form/"},"next":{"title":"<CheckboxGroup />","permalink":"/availity-react/form/components/checkbox-group"}}');var a=n(4848),r=n(8453);const o={title:"Migrating from reactstrap validation"},s=void 0,l={},d=[{value:"Form with <code>availity-reactstrap-validation</code>",id:"form-with-availity-reactstrap-validation",level:2},{value:"Equivalent Form with <code>@availity/form</code>",id:"equivalent-form-with-availityform",level:2}];function c(e){const i={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(i.p,{children:["The primary difference in developing with ",(0,a.jsx)(i.code,{children:"availity-reactstrap-validation"})," and ",(0,a.jsx)(i.code,{children:"@availity/form"})," is validation. With ",(0,a.jsx)(i.code,{children:"availity-reactstrap-validation"}),", we define validation schemas on the input components in the form with the ",(0,a.jsx)(i.code,{children:"validate"})," prop, like so:"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-jsx",children:"import React from 'react';\nimport { AvInput, AvForm } from 'availity-reactstrap-validation';\n\nconst Example = () => {\n  return (\n    <AvForm>\n      <AvInput\n        name=\"myInput\"\n        type=\"text\"\n        validate={{\n          required: {\n            value: true,\n            errorMessage: 'This field is required.',\n          },\n        }}\n      />\n    </AvForm>\n  );\n};\n"})}),"\n",(0,a.jsxs)(i.p,{children:["Note: ",(0,a.jsx)(i.code,{children:"availity-reactstrap-validation"})," also has a ",(0,a.jsx)(i.code,{children:"required"})," prop that acts as a shorthand for required validation using the ",(0,a.jsx)(i.code,{children:"validate"})," prop. The code snippet above is equivalent to:"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-jsx",children:"import React from 'react';\nimport { AvInput, AvForm } from 'availity-reactstrap-validation';\n\nconst Example = () => {\n  return (\n    <AvForm>\n      <AvInput name=\"myInput\" type=\"text\" required />\n    </AvForm>\n  );\n};\n"})}),"\n",(0,a.jsxs)(i.p,{children:["With ",(0,a.jsx)(i.code,{children:"@availity/form"}),", we use ",(0,a.jsx)(i.code,{children:"yup"})," and ",(0,a.jsx)(i.code,{children:"@availity/yup"})," to define the validation schema for all of the inputs in the form on the ",(0,a.jsx)(i.code,{children:"<Form />"})," component with the ",(0,a.jsx)(i.code,{children:"validationSchema"})," prop from ",(0,a.jsx)(i.a,{href:"https://formik.org/docs/guides/validation#validationschema",children:"formik"}),", like so:"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-jsx",children:"import React from 'react';\nimport { Input, Form } from '@availity/form';\nimport * as yup from 'yup';\nimport '@availity/yup';\n\nconst Example = () => {\n  return (\n    <Form\n      initialValues={{ myInput: '' }}\n      validationSchema={yup.object().shape({\n        myInput: yup.string().isRequired(true, 'This field is required.'),\n      })}\n    >\n      <Input name=\"myInput\" type=\"text\" />\n    </Form>\n  );\n};\n"})}),"\n",(0,a.jsxs)(i.p,{children:["Another key difference is we define the initial state of the inputs in the form with the ",(0,a.jsx)(i.code,{children:"initialValues"})," prop from ",(0,a.jsx)(i.a,{href:"https://formik.org/docs/api/formik#initialvalues-values",children:"formik"})," on the ",(0,a.jsx)(i.code,{children:"<Form />"})," component."]}),"\n",(0,a.jsxs)(i.h2,{id:"form-with-availity-reactstrap-validation",children:["Form with ",(0,a.jsx)(i.code,{children:"availity-reactstrap-validation"})]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-jsx",children:"import React from 'react';\nimport { AvField, AvForm } from 'availity-reactstrap-validation';\n\nconst Example = () => {\n  return (\n    <AvForm onValidSubmit={() => {}}>\n      <AvField\n        name=\"memberId\"\n        type=\"text\"\n        label=\"Member ID\"\n        validate={{\n          pattern: {\n            value: 'd{8}',\n            errorMessage: 'Member ID must be 8 digits',\n          },\n          required: {\n            value: true,\n            errorMessage: 'This Field is Required.',\n          },\n        }}\n      />\n      <AvField\n        name=\"zipCode\"\n        type=\"text\"\n        label=\"Zip Code\"\n        validate={{\n          pattern: {\n            value: '^d{5}(?:-d{4})?$',\n            errorMessage: 'Valid Zip Code Formats: 12345 or 12345-6789',\n          },\n          required: {\n            value: true,\n            errorMessage: 'This Field is Required.',\n          },\n        }}\n      />\n    </AvForm>\n  );\n};\n"})}),"\n",(0,a.jsxs)(i.h2,{id:"equivalent-form-with-availityform",children:["Equivalent Form with ",(0,a.jsx)(i.code,{children:"@availity/form"})]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-jsx",children:"import React from 'react';\nimport { Field, Form } from '@availity/form';\nimport '@availity/yup';\nimport * as yup from 'yup';\n\nconst Example = () => {\n  return (\n    <Form\n      onSubmit={() => {}}\n      initialValues={{\n        memberId: '',\n        zipCode: '',\n      }}\n      validationSchema={yup.object().shape({\n        memberId: yup\n          .string()\n          .isRequired(true, 'This Field is Required.')\n          .matches(/^\\d{8}$/, 'Member ID must be 8 digits.'),\n        zipCode: yup\n          .string()\n          .isRequired(true, 'This Field is Required.')\n          .matches(\n            /^\\d{5}(?:-\\d{4})?$/,\n            'Valid Zip Code Formats: 12345 or 12345-6789'\n          ),\n      })}\n    >\n      <Field name=\"memberId\" type=\"text\" label=\"Member ID\" />\n      <Field name=\"zipCode\" type=\"text\" label=\"Zip Code\" />\n    </Form>\n  );\n};\n"})})]})}function m(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>s});var t=n(6540);const a={},r=t.createContext(a);function o(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);