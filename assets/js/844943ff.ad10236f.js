"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[5705],{5609:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"bootstrap-components/feature","title":"Feature","description":"Check environment features for the current environment to determine if a particular feature is enabled.","source":"@site/docs/bootstrap-components/feature.mdx","sourceDirName":"bootstrap-components","slug":"/bootstrap-components/feature","permalink":"/availity-react/bootstrap-components/feature","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/bootstrap-components/feature.mdx","tags":[],"version":"current","frontMatter":{"title":"Feature"},"sidebar":"someSidebar","previous":{"title":"useFavorites","permalink":"/availity-react/bootstrap-components/favorites/hook"},"next":{"title":"Getting Started","permalink":"/availity-react/bootstrap-components/feedback/"}}');var i=t(4848),r=t(8453);const a={title:"Feature"},d=void 0,l={},o=[{value:"Installation",id:"installation",level:3},{value:"Example",id:"example",level:3},{value:"Live example",id:"live-example",level:4},{value:"Props",id:"props",level:3},{value:"<code>features: string | string[] | string[][]</code>",id:"features-string--string--string",level:4},{value:"<code>loader?: boolean | ReactNode</code>",id:"loader-boolean--reactnode",level:4},{value:"<code>whenDisabled?: ReactNode</code>",id:"whendisabled-reactnode",level:4},{value:"<code>children?: ReactNode</code>",id:"children-reactnode",level:4},{value:"<code>negate?: boolean</code>",id:"negate-boolean",level:4},{value:"isFeatureEnabled",id:"isfeatureenabled",level:3},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4},{value:"Usage",id:"usage",level:4},{value:"generate-features-json (CLI)",id:"generate-features-json-cli",level:3},{value:"Arguments",id:"arguments-1",level:4},{value:"Usage",id:"usage-1",level:4},{value:"As npm script",id:"as-npm-script",level:4},{value:"features.json",id:"featuresjson",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Check environment features for the current environment to determine if a particular feature is enabled."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/@availity/feature",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/npm/v/@availity/feature.svg?style=for-the-badge",alt:"Version"})})}),"\n",(0,i.jsx)(n.p,{children:"Note: Only works with OpenShift deployed applications using the standard pipeline"}),"\n",(0,i.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.p,{children:"npm"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @availity/feature axios --save\n"})}),"\n",(0,i.jsx)(n.p,{children:"Yarn"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add @availity/feature axios\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport Feature from '@availity/feature';\n\nconst Example = () => (\n  <Feature\n    features={[\n      'AV-1234',\n      'AV-2345',\n      ['AV-3456', 'AV-4567'],\n      ['AV-5678', 'AV-6789'],\n    ]}\n  >\n    {/* stuff to render if the feature indicated\n      above is enabled in the environment */}\n  </Feature>\n);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"live-example",children:"Live example"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://availity.github.io/availity-react/storybook/?path=/story/bootstrap-components-feature--default",children:"Storybook"})}),"\n",(0,i.jsx)(n.p,{children:"Component which validates the environment's features to determine if children content should be shown."}),"\n",(0,i.jsx)(n.h3,{id:"props",children:"Props"}),"\n",(0,i.jsx)(n.h4,{id:"features-string--string--string",children:(0,i.jsx)(n.code,{children:"features: string | string[] | string[][]"})}),"\n",(0,i.jsxs)(n.p,{children:["Can either be a string, eg: ",(0,i.jsx)(n.code,{children:'"AV-1234"'})," or an array containing feature ID strings as well as other arrays which contain feature ID strings, eg: ",(0,i.jsx)(n.code,{children:"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]"}),". The items in a nested array indicate feature IDs that must ",(0,i.jsx)(n.em,{children:"all"})," be enabled for a feature to be considered enabled (see ",(0,i.jsx)(n.code,{children:"children"}),') - they act as "AND". The items in the top of the array act as "OR" - if ',(0,i.jsx)(n.em,{children:"any"})," are enabled, the feature is considered enabled. The example ",(0,i.jsx)(n.code,{children:"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]"})," is similar to ",(0,i.jsx)(n.code,{children:"'AV-1234' OR 'AV-2345' OR ('AV-3456' && 'AV-4567') OR ('AV-5678' && 'AV-6789')"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"loader-boolean--reactnode",children:(0,i.jsx)(n.code,{children:"loader?: boolean | ReactNode"})}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.code,{children:"true"}),", ",(0,i.jsx)(n.code,{children:"BlockUi"})," is used when loading the features. When a ",(0,i.jsx)(n.code,{children:"node"}),", that node is rendered instead of ",(0,i.jsx)(n.code,{children:"BlockUi"})," when loading the features. When ",(0,i.jsx)(n.code,{children:"false"}),", nothing is rendered when loading the features. ",(0,i.jsx)(n.strong,{children:"Default:"})," ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"whendisabled-reactnode",children:(0,i.jsx)(n.code,{children:"whenDisabled?: ReactNode"})}),"\n",(0,i.jsx)(n.p,{children:"The content that renders when the features are disabled."}),"\n",(0,i.jsx)(n.h4,{id:"children-reactnode",children:(0,i.jsx)(n.code,{children:"children?: ReactNode"})}),"\n",(0,i.jsx)(n.p,{children:"The content that renders when the features are enabled."}),"\n",(0,i.jsx)(n.h4,{id:"negate-boolean",children:(0,i.jsx)(n.code,{children:"negate?: boolean"})}),"\n",(0,i.jsxs)(n.p,{children:["Negate the feature. If the feature specified is enabled, it acts as if it were disabled (by rendering the ",(0,i.jsx)(n.code,{children:"whenDisabled"})," prop content). If the feature specified is disabled, it acts as if it were enabled (by rendering the ",(0,i.jsx)(n.code,{children:"children"})," prop content)."]}),"\n",(0,i.jsx)(n.h3,{id:"isfeatureenabled",children:"isFeatureEnabled"}),"\n",(0,i.jsx)(n.p,{children:"Function that validates the environment's features to determine if children content should be shown."}),"\n",(0,i.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"features"})}),": String, or an array containing strings. Required.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"string"}),": The feature ID, eg: ",(0,i.jsx)(n.code,{children:"'AV-1234'"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"array"}),": The array can contain feature ID strings as well as other arrays which contain feature ID strings, eg: ",(0,i.jsx)(n.code,{children:"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]"}),". The items in a nested array indicate feature IDs that must ",(0,i.jsx)(n.em,{children:"all"})," be enabled for a feature to be considered enabled (see ",(0,i.jsx)(n.code,{children:"children"}),') - they act as "AND". The items in the top of the array act as "OR" - if ',(0,i.jsx)(n.em,{children:"any"})," are enabled, the feature is considered enabled. The example ",(0,i.jsx)(n.code,{children:"['AV-1234', 'AV-2345', ['AV-3456', 'AV-4567'], ['AV-5678', 'AV-6789']]"})," is similar to ",(0,i.jsx)(n.code,{children:"'AV-1234' || 'AV-2345' || ('AV-3456' && 'AV-4567') || ('AV-5678' && 'AV-6789')"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:["A promise that can be awaited and resolves to ",(0,i.jsx)(n.code,{children:"true"})," or ",(0,i.jsx)(n.code,{children:"false"})," indicating whether the feature(s) are enabled or not."]}),"\n",(0,i.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { isFeatureEnabled } from '@availity/feature';\n\nasync () => {\n  const enabled = await isFeatureEnabled('AV-1234');\n  if (!enabled) return;\n  // do stuff, this feature is enabled!\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"generate-features-json-cli",children:"generate-features-json (CLI)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"generate-features-json"})," is a CLI tool that takes a ",(0,i.jsx)(n.code,{children:"features.json"})," file and outputs environment specific ",(0,i.jsx)(n.code,{children:"features.json"})," files to be used depending on which environment it's currently in. Note: This is where OpenShift comes into play. OpenShift ensures the right file (based on the ENV) is placed in the right location when the pod starts."]}),"\n",(0,i.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"path-to-features.json"})}),": Directory path or file location. Optional. Default: ",(0,i.jsx)(n.code,{children:"project/config/features.json"}),". If a directory path, a ",(0,i.jsx)(n.code,{children:"features.json"})," file must exist in the directory. If a file location, it must be a ",(0,i.jsx)(n.code,{children:".json"})," file. Note: Follow the example ",(0,i.jsx)(n.code,{children:"features.json"})," file for what the contents of the file should be."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"path-to-build-dist"})}),": Directory path. Optional. Default: if ",(0,i.jsx)(n.code,{children:"NODE_ENV"}),' is "production" ',(0,i.jsx)(n.code,{children:"dist/features"}),", else ",(0,i.jsx)(n.code,{children:"build/features"}),". The location to output the various environment specific JSON files. Note: OpenShift is looking for the ",(0,i.jsx)(n.code,{children:"features"})," directory in the web root of the image, so if this value is changed, ensure that the resulting image has the ",(0,i.jsx)(n.code,{children:"features"})," directory."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"usage-1",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"generate-features-json\ngenerate-features-json ./features.json\ngenerate-features-json other-path dist/features\n"})}),"\n",(0,i.jsx)(n.h4,{id:"as-npm-script",children:"As npm script"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "build": "av build && generate-features-json"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"with extra parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "build": "av build && generate-features-json ./features.json"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"featuresjson",children:"features.json"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"features.json"}),' file is a single file that details "features" and the environments that each feature is ',(0,i.jsx)(n.strong,{children:"disabled"})," in. Typically, the name of the feature is the JIRA ticket number that the feature was developed for. This helps identify what the feature does by just knowing the name.\nPossible ",(0,i.jsx)(n.code,{children:"disabledEnvironments"})," values are ",(0,i.jsx)(n.code,{children:'"DEV"'}),", ",(0,i.jsx)(n.code,{children:'"STAGE"'}),", and ",(0,i.jsx)(n.code,{children:'"PRD"'}),". These values line up with the ",(0,i.jsx)(n.code,{children:"ENV"})," environment variable within OpenShift."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "name": "PREC-4597",\n    "description": "https://jira.availity.com:8443/browse/PREC-4597",\n    "disabledEnvironments": ["PRD"]\n  },\n  {\n    "name": "CB-675",\n    "description": "https://jira.availity.com:8443/browse/PREC-4597",\n    "disabledEnvironments": ["STAGE", "PRD"]\n  }\n]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The environment specific ",(0,i.jsx)(n.code,{children:"features.json"})," files that get generated are a simple array of disabled feature names. The above example produces a ",(0,i.jsx)(n.code,{children:"PRD.json"})," with ",(0,i.jsx)(n.code,{children:'["PREC-4597", "CB-675"]'})," and ",(0,i.jsx)(n.code,{children:"STAGE.json"})," with ",(0,i.jsx)(n.code,{children:'["CB-675"]'}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Enabling and disabling features does require a deployment, but with the OpenShift CI/CD process, that ",(0,i.jsx)(n.em,{children:"should"})," be painless."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);