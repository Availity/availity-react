"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[8659],{7221:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"bootstrap-components/spaces/ghost-text","title":"<SpacesGhostText />","description":"Display the ghost text for a given space. Renders null if the ghost text should not display.","source":"@site/docs/bootstrap-components/spaces/ghost-text.md","sourceDirName":"bootstrap-components/spaces","slug":"/bootstrap-components/spaces/ghost-text","permalink":"/availity-react/bootstrap-components/spaces/ghost-text","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/bootstrap-components/spaces/ghost-text.md","tags":[],"version":"current","frontMatter":{"title":"<SpacesGhostText />"},"sidebar":"someSidebar","previous":{"title":"<SpacesAgreement />","permalink":"/availity-react/bootstrap-components/spaces/agreement"},"next":{"title":"useSpaces","permalink":"/availity-react/bootstrap-components/spaces/use-spaces"}}');var n=s(4848),a=s(8453);const c={title:"<SpacesGhostText />"},i=void 0,r={},p=[{value:"Example",id:"example",level:3},{value:"Live example: <a> Storybook</a>",id:"live-example--storybook",level:4},{value:"Props",id:"props",level:3},{value:"<code>spaceId?: string</code>",id:"spaceid-string",level:4}];function l(e){const t={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Display the ghost text for a given space. Renders ",(0,n.jsx)(t.code,{children:"null"})," if the ghost text should not display."]}),"\n",(0,n.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"import React from 'react';\nimport Spaces, { SpacesGhostText } from '@availity/spaces';\n\nconst Example = () => (\n  <Spaces\n    spaceIds={['73162546201441126239486200007187']}\n    clientId=\"my-client-id\"\n  >\n    <SpacesGhostText />\n  </Spaces>\n);\n"})}),"\n",(0,n.jsxs)(t.h4,{id:"live-example--storybook",children:["Live example: ",(0,n.jsx)("a",{href:"https://availity.github.io/availity-react/storybook/?path=/story/bootstrap-components-spaces--ghost-text",children:" Storybook"})]}),"\n",(0,n.jsx)(t.h3,{id:"props",children:"Props"}),"\n",(0,n.jsx)(t.h4,{id:"spaceid-string",children:(0,n.jsx)(t.code,{children:"spaceId?: string"})}),"\n",(0,n.jsxs)(t.p,{children:["The id of the space to render the ghost text for. If no ",(0,n.jsx)(t.code,{children:"spaceId"})," is provided, the first space in the ",(0,n.jsx)(t.code,{children:"spaces"})," array is used. Note: This is only to be used when the Spaces provider should only ever contain a single space. |"]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>i});var o=s(6540);const n={},a=o.createContext(n);function c(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);