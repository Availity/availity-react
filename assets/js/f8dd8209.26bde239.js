"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[2482],{3718:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"bootstrap-components/pagination/pagination","title":"<Pagination />","description":"This is the provider component needed for @availity/pagination components to work. All @availity/pagination components must be children of a Pagination provider.","source":"@site/docs/bootstrap-components/pagination/pagination.md","sourceDirName":"bootstrap-components/pagination","slug":"/bootstrap-components/pagination/pagination","permalink":"/availity-react/bootstrap-components/pagination/pagination","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/bootstrap-components/pagination/pagination.md","tags":[],"version":"current","frontMatter":{"title":"<Pagination />","slug":"pagination"},"sidebar":"someSidebar","previous":{"title":"Getting Started","permalink":"/availity-react/bootstrap-components/pagination/"},"next":{"title":"<PaginationControls />","permalink":"/availity-react/bootstrap-components/pagination/controls"}}');var a=t(4848),i=t(8453);const r={title:"<Pagination />",slug:"pagination"},s=void 0,c={},l=[{value:"Example",id:"example",level:3},{value:"Live example: <a> Storybook</a>",id:"live-example--storybook",level:4},{value:"Props",id:"props",level:3},{value:"<code>items? object[] | (currentPage: number, itemsPerPage: number) =&gt; { items: object[], totalCount: number }</code>",id:"items-object--currentpage-number-itemsperpage-number---items-object-totalcount-number-",level:4},{value:"<code>itemsPerPage?: number</code>",id:"itemsperpage-number",level:4},{value:"<code>page?: number</code>",id:"page-number",level:4},{value:"<code>onPageChange?: (page: number) =&gt; void</code>",id:"onpagechange-page-number--void",level:4},{value:"<code>watchList?: any[]</code>",id:"watchlist-any",level:4},{value:"<code>resetParams?: any[]</code>",id:"resetparams-any",level:4},{value:"<code>defaultPage?: number</code>",id:"defaultpage-number",level:4},{value:"<code>debounceTimeout?: number</code>",id:"debouncetimeout-number",level:4},{value:"<code>shouldReturnPrevious?: boolean</code>",id:"shouldreturnprevious-boolean",level:4},{value:"<code>onError?: (error: Error) =&gt; void</code>",id:"onerror-error-error--void",level:4}];function d(e){const n={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["This is the provider component needed for ",(0,a.jsx)(n.code,{children:"@availity/pagination"})," components to work. All ",(0,a.jsx)(n.code,{children:"@availity/pagination"})," components must be children of a Pagination provider."]}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import React, { useState } from 'react';\nimport Pagination from '@availity/pagination';\n\nconst Example = () => {\n  const [items, setItems] = useState([]);\n\n  // logic to get items\n\n  return (\n    <Pagination itemsPerPage={25} items={items}>\n      <Pagination.Content component={Component} />\n    </Pagination>\n  );\n};\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"live-example--storybook",children:["Live example: ",(0,a.jsx)("a",{href:"https://availity.github.io/availity-react/storybook/?path=/docs/bootstrap-components-pagination--docs",children:" Storybook"})]}),"\n",(0,a.jsx)(n.h3,{id:"props",children:"Props"}),"\n",(0,a.jsx)(n.h4,{id:"items-object--currentpage-number-itemsperpage-number---items-object-totalcount-number-",children:(0,a.jsx)(n.code,{children:"items? object[] | (currentPage: number, itemsPerPage: number) => { items: object[], totalCount: number }"})}),"\n",(0,a.jsxs)(n.p,{children:["If Array, defaults ",(0,a.jsx)(n.code,{children:"totalCount"})," to the length of the array, and page values are sliced from the Array. If a function, it is called with the current page as an argument and expects an array of items to be returned."]}),"\n",(0,a.jsx)(n.h4,{id:"itemsperpage-number",children:(0,a.jsx)(n.code,{children:"itemsPerPage?: number"})}),"\n",(0,a.jsxs)(n.p,{children:["The total amount of items to render at a time. ( After all the filtering ). ",(0,a.jsx)(n.strong,{children:"Default:"})," ",(0,a.jsx)(n.code,{children:"10"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"page-number",children:(0,a.jsx)(n.code,{children:"page?: number"})}),"\n",(0,a.jsx)(n.p,{children:"Optionally pass your own page in to make the pagination component controlled from props."}),"\n",(0,a.jsx)(n.h4,{id:"onpagechange-page-number--void",children:(0,a.jsx)(n.code,{children:"onPageChange?: (page: number) => void"})}),"\n",(0,a.jsx)(n.p,{children:"Function to call after the new page has been set when the user changes the page"}),"\n",(0,a.jsx)(n.h4,{id:"watchlist-any",children:(0,a.jsx)(n.code,{children:"watchList?: any[]"})}),"\n",(0,a.jsxs)(n.p,{children:["Array of data points that, when changed, causes the pagination to update. This is helpful when the ",(0,a.jsx)(n.code,{children:"items"})," prop is a function and you want ",(0,a.jsx)(n.code,{children:"items"})," to be called to get the most up-to-date list."]}),"\n",(0,a.jsx)(n.h4,{id:"resetparams-any",children:(0,a.jsx)(n.code,{children:"resetParams?: any[]"})}),"\n",(0,a.jsx)(n.p,{children:"Array of data points that, when changed, causes pagination to reset the current page to 1."}),"\n",(0,a.jsx)(n.h4,{id:"defaultpage-number",children:(0,a.jsx)(n.code,{children:"defaultPage?: number"})}),"\n",(0,a.jsxs)(n.p,{children:["The starting page to use when the component mounts. ",(0,a.jsx)(n.strong,{children:"Default:"})," ",(0,a.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"debouncetimeout-number",children:(0,a.jsx)(n.code,{children:"debounceTimeout?: number"})}),"\n",(0,a.jsxs)(n.p,{children:["The amount of time (in milliseconds) to delay fetching page data since the last time page data was fetched (debounced input). Useful for when ",(0,a.jsx)(n.code,{children:"items"})," is a function that's calling an api that you want to relieve pressure on. ",(0,a.jsx)(n.strong,{children:"Default"}),": ",(0,a.jsx)(n.code,{children:"0"})]}),"\n",(0,a.jsx)(n.h4,{id:"shouldreturnprevious-boolean",children:(0,a.jsx)(n.code,{children:"shouldReturnPrevious?: boolean"})}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"true"}),", the previous results are returned. Note: if no results have been fetched thus far, an empty array is returned. Useful for when ",(0,a.jsx)(n.code,{children:"items"})," is a function and new results should not be fetched until certain criteria is met. ",(0,a.jsx)(n.strong,{children:"Default:"})," ",(0,a.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"onerror-error-error--void",children:(0,a.jsx)(n.code,{children:"onError?: (error: Error) => void"})}),"\n",(0,a.jsx)(n.p,{children:"Function to call when an error occurs"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(6540);const a={},i=o.createContext(a);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);