"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[8840],{8453:(e,s,t)=>{t.d(s,{R:()=>c,x:()=>r});var n=t(6540);const a={},o=n.createContext(a);function c(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),n.createElement(o.Provider,{value:s},e.children)}},9343:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>i,contentTitle:()=>r,default:()=>l,frontMatter:()=>c,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"bootstrap-components/spaces/use-spaces","title":"useSpaces","description":"This is a custom hook for grabbing spaces from the Spaces provider.","source":"@site/docs/bootstrap-components/spaces/use-spaces.md","sourceDirName":"bootstrap-components/spaces","slug":"/bootstrap-components/spaces/use-spaces","permalink":"/availity-react/bootstrap-components/spaces/use-spaces","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/bootstrap-components/spaces/use-spaces.md","tags":[],"version":"current","frontMatter":{"title":"useSpaces"},"sidebar":"someSidebar","previous":{"title":"<SpacesGhostText />","permalink":"/availity-react/bootstrap-components/spaces/ghost-text"},"next":{"title":"SpacesContext","permalink":"/availity-react/bootstrap-components/spaces/context"}}');var a=t(4848),o=t(8453);const c={title:"useSpaces"},r=void 0,i={},p=[{value:"Example",id:"example",level:3}];function d(e){const s={code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.p,{children:["This is a custom hook for grabbing spaces from the ",(0,a.jsx)(s.code,{children:"Spaces"})," provider."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"useSpaces"})," accepts a variadic number of ",(0,a.jsx)(s.code,{children:"ids"}),". ",(0,a.jsx)(s.code,{children:"useSpaces"})," returns a tuple containing the spaces for the ",(0,a.jsx)(s.code,{children:"ids"})," passed in, in the order they are passed in. If there is no space in the ",(0,a.jsx)(s.code,{children:"Spaces"})," provider for an id, it is returned as ",(0,a.jsx)(s.code,{children:"undefined"}),". If no ",(0,a.jsx)(s.code,{children:"ids"})," are passed in - or a single ",(0,a.jsx)(s.code,{children:"id"})," is passed in and it is ",(0,a.jsx)(s.code,{children:"undefined"}),", all spaces from the ",(0,a.jsx)(s.code,{children:"Spaces"})," provider are returned."]}),"\n",(0,a.jsx)(s.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-jsx",children:"import React from 'react';\nimport { useSpaces } from '@availity/spaces';\n\nconst SpacesComponent = () => {\n  // ids can be space ids or payer ids\n  const [space1, space2, space3] = useSpaces('1', '2', '3');\n};\n"})})]})}function l(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);