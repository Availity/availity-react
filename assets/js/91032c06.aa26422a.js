"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[9421],{4299:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"form/phone/components/phone","title":"<Phone />","description":"Availity Phone component using Formik and Yup","source":"@site/docs/form/phone/components/phone.md","sourceDirName":"form/phone/components","slug":"/form/phone/components/phone","permalink":"/availity-react/form/phone/components/phone","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/phone/components/phone.md","tags":[],"version":"current","frontMatter":{"title":"<Phone />"},"sidebar":"someSidebar","previous":{"title":"Getting Started","permalink":"/availity-react/form/phone/"},"next":{"title":"validatePhone","permalink":"/availity-react/form/phone/components/validate-phone"}}');var t=o(4848),i=o(8453);const l={title:"<Phone />"},r=void 0,d={},a=[{value:"Example",id:"example",level:3},{value:"Live example",id:"live-example",level:4},{value:"Props",id:"props",level:3},{value:"<code>name: string</code>",id:"name-string",level:4},{value:"<code>label?: string</code>",id:"label-string",level:4},{value:"<code>country?: string</code>",id:"country-string",level:4},{value:"<code>showExtension?: boolean</code>",id:"showextension-boolean",level:4},{value:"<code>extProps?: object</code>",id:"extprops-object",level:4},{value:"<code>phoneColProps?: object</code>",id:"phonecolprops-object",level:4},{value:"<code>extColProps?: object</code>",id:"extcolprops-object",level:4},{value:"<code>restPhoneProps</code> &amp; <code>restExtProps</code>",id:"restphoneprops--restextprops",level:4},{value:"Lazy Loading and Suspense",id:"lazy-loading-and-suspense",level:3}];function c(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Availity Phone component using Formik and Yup"}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\nimport { Form } from '@availity/form';\nimport { Phone, validatePhone } from '@availity/phone';\nimport { Button } from 'reactstrap';\nimport * as yup from 'yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      phone: '',\n      ext: '',\n    }}\n    onSubmit={(values) => alert(JSON.stringify(values))}\n    validationSchema={yup.object({\n      phone: yup.string().validatePhone().isRequired(true),\n      ext: yup.string(),\n    })}\n  >\n    <Phone\n      name=\"phone\"\n      label=\"Phone\"\n      country=\"US\"\n      showExtension={true}\n      phoneColProps={{ xs: { size: 9 } }}\n      extProps={{\n        name: 'ext',\n        label: 'Ext.',\n        extColProps: {\n          xs: { size: 3 },\n        },\n      }}\n    />\n    <Button type=\"submit\" color=\"primary\">\n      Submit\n    </Button>\n  </Form>\n);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"live-example",children:"Live example"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://availity.github.io/availity-react/storybook/?path=/docs/bootstrap-components-phone--default",children:"Storybook"})}),"\n",(0,t.jsx)(n.h3,{id:"props",children:"Props"}),"\n",(0,t.jsx)(n.h4,{id:"name-string",children:(0,t.jsx)(n.code,{children:"name: string"})}),"\n",(0,t.jsx)(n.p,{children:"Identifies the field and matches the validation schema."}),"\n",(0,t.jsx)(n.h4,{id:"label-string",children:(0,t.jsx)(n.code,{children:"label?: string"})}),"\n",(0,t.jsxs)(n.p,{children:["Displays a Reactstrap ",(0,t.jsx)(n.code,{children:"<Label />"})," for the field."]}),"\n",(0,t.jsx)(n.h4,{id:"country-string",children:(0,t.jsx)(n.code,{children:"country?: string"})}),"\n",(0,t.jsxs)(n.p,{children:["Default country for parsing national numbers. This is the ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2",children:"two letter ISO country code"}),". If no code is provided, the default is ",(0,t.jsx)(n.code,{children:"'US'"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"showextension-boolean",children:(0,t.jsx)(n.code,{children:"showExtension?: boolean"})}),"\n",(0,t.jsxs)(n.p,{children:["Enable the phone extension field. This is ",(0,t.jsx)(n.code,{children:"false"})," by default."]}),"\n",(0,t.jsx)(n.h4,{id:"extprops-object",children:(0,t.jsx)(n.code,{children:"extProps?: object"})}),"\n",(0,t.jsx)(n.p,{children:"Used to pass props to the extension field when it is enabled."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "",\n  "label": "",\n  "extColProps": {}\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"phonecolprops-object",children:(0,t.jsx)(n.code,{children:"phoneColProps?: object"})}),"\n",(0,t.jsxs)(n.p,{children:["Used to control props on the ",(0,t.jsx)(n.code,{children:"<Col />"})," for the phone field, if needed. The phone column defaults to ",(0,t.jsx)(n.code,{children:"xs: { size: 12 }"})," when not rendering an extension field, and defaults to ",(0,t.jsx)(n.code,{children:"xs: { size: 10 }"})," when rendering an extension field."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "xs": {\n    "size": 9\n  },\n  "sm": {\n    "size": 10\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"extcolprops-object",children:(0,t.jsx)(n.code,{children:"extColProps?: object"})}),"\n",(0,t.jsxs)(n.p,{children:["Used to control props on ",(0,t.jsx)(n.code,{children:"<Col />"})," for the extension field, if needed. The extension column has no default size value, so it's default will effectively be ",(0,t.jsx)(n.code,{children:"size: { 12 - phoneColSize }"})," unless otherwise specified."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "xs": {\n    "size": 3\n  },\n  "sm": {\n    "size": 2\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"restphoneprops--restextprops",children:[(0,t.jsx)(n.code,{children:"restPhoneProps"})," & ",(0,t.jsx)(n.code,{children:"restExtProps"})]}),"\n",(0,t.jsxs)(n.p,{children:["These are respectively spread onto the corresponding ",(0,t.jsx)(n.code,{children:"@availity/form"})," ",(0,t.jsx)(n.code,{children:"<Field />"})," components, so props like ",(0,t.jsx)(n.code,{children:"grid"})," can be used on the phone and extension fields."]}),"\n",(0,t.jsx)(n.h3,{id:"lazy-loading-and-suspense",children:"Lazy Loading and Suspense"}),"\n",(0,t.jsxs)(n.p,{children:["Because ",(0,t.jsx)(n.code,{children:"libphonenumber-js"})," has a relatively large package size, it is recommended that ",(0,t.jsx)(n.a,{href:"https://reactjs.org/docs/code-splitting.html#reactlazy",children:"lazy loading and suspense"})," are utilized with this component. This will give your app the benefit of Code-Splitting, and the bundle containing ",(0,t.jsx)(n.code,{children:"libphonenumber-js"})," and the ",(0,t.jsx)(n.code,{children:"<Phone />"})," component will be loaded automatically when the component is first rendered. While the component is being loaded, a ",(0,t.jsx)(n.code,{children:"fallback"})," component will be rendered to show the user some placeholder content in the meantime."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React, { Suspense } from 'react';\n\nconst Phone = React.lazy(() => import('./Phone'));\n\nfunction MyApp() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Phone />\n      </Suspense>\n    </div>\n  );\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var s=o(6540);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);